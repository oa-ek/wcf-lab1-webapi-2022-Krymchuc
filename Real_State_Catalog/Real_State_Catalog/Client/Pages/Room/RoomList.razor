@page "/hotel-room"

@using Real_State_Catalog.Shared.Repository.IRepository
@using Models
@inject IRoomRepository RoomRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject Real_State_Catalog_Server.Service.IService.IFileUpload FileUpload

@attribute [Authorize(Roles = Real_State_Catalog.Shared.SD.Role_Admin)]
<div class = "row mt-4">
    <div class = "col-8">
        <h4 class = "card-title text-info">Rooms</h4>
    </div>
    <div class = "col-3 offset-1">
        <NavLink href = "hotel-room/create" class = "btn btn-primary btn-alert-info form-control">Add New Room</NavLink>
    </div>
</div>


<div class = "row mt-4">
    <div class = "col-12">
        <table class = "table table-bordered table-hover">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Occupancy</td>
                    <td>Price</td>
                    <td>Square footage of the room</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
               @try{

              
                @if (Rooms.Any())
                {

                    foreach(var room in Rooms)
                    {
                         <tr >
                            <td>@room.Name</td>
                             <td>@room.Occupancy</td>
                              <td>@room.Rate.ToString("c")</td>
                               <td>@room.SqFt</td>
                                  <td> <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class = "btn btn-danger" @onclick="()=>HandleDelete(room.Id)">Delete</button></td>
                        </tr>

                    }
                }
                else
                {
                    <td colspan = 5>No Hotels Found!</td>

                    }
                }
                catch(Exception ex){
                    throw ex;
                }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<RoomDTO> Rooms { get; set; } = new List<RoomDTO>();
    private int? DeleteRoomId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Rooms = await RoomRepository.GetAllHotelRoom();
    }

    private void RedirectTo(int roomId)
    {
        NavigationManager.NavigateTo($"hotel-room/edit/{roomId}");
    }


    private async Task HandleDelete(int roomId)
    {

        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");

    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && DeleteRoomId != null)
        {

            RoomDTO hotelRoom = await RoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach (var image in hotelRoom.RoomImages)
            {
                var imageName = image.RoomImageURL.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                FileUpload.DeleteFile(imageName);

            }
            //once the images are deleted, delete the hotel room by its id
            await RoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JsRuntime.ToastrSuccess("Hotel Room Deleted");

            //re-populate the list of rooms
            Rooms = await RoomRepository.GetAllHotelRoom();
        }
                await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

    }

}
